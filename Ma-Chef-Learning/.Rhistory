library(rjson)
library("rjson")
installed.packages()
install.packages()
install.packages("rjson")
install.packages("rjson")
install.packages("rjson")
install.packages("rjson")
install.packages("rjson")
library(rjson)
json_file <- "recipies.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
library(rjson)
json_file <- "C:\\Users\\PAUL\\Documents\\ECS_171\\project_recipies\\recipies.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
install.packages("rjsonio")
install.packages("RJSONIO")
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
data
data[1]
data[1][1]
data[1][2]
data[1][1]
data[1][1][2]
data[1][1][1]
data[1][1][4]
data[[1]]
data[[1]].ingredients
data[[1]].$ingredients
data[[1]]$ingredients
data[[1]]$ingredients[3]
data[[1]]$ingredients[3][1]
data[1$ingredients[3]
]
data[1]$ingredients[3]
data[1]
unlist(data[[1]])
matrix(unlist(data[[1]]))
unlist(data[[1]])
install.packages("jsonlite")
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
ingredients['content']
ingredients['content'][1]
inspect(ingredients['content'])
sapply(ingredients, `[`, "content")
unlist(sapply(ingredients, `[`, "content"))
test <-data.frame(text=unlist(sapply(ingredients, `[`, "content")),
stringsAsFactors=F)
test
data$ingredients[936,]
data$ingredients[936]
data$ingredients[935]
test = sapply(ingredients, `[`, "content")
test[935]
test = sapply(data$ingredients, `<-`, test)
test = sapply(data$ingredients, `=`, test)
data$ingredients = test
data[1,]
test = data
data <- fromJSON(json_file)
data[1,]
data[2,]
test[2,]
typeof(test)
toJSON(test)
write(toJSON(test),file="new_train.js")
write(toJSON(test),file="new_train.json")
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
write(toJSON(data$ingredients, pretty = TRUE), file = "new_train.json")
write(toJSON(data, pretty = TRUE), file = "new_train.json")
typeof(ingredient_count_by_cuisine)
toJSON(ingredient_count_by_cuisine)
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
load("C:/Users/PAUL/Downloads/IngredientFreqTable.RData")
view(IngredientFreqTable)
inspect(IngredientFreqTable)
inspect(a)
source('~/ECS_171/project_recipies/parse_json_into_table.R', echo=TRUE)
write.csv(data, file="training_data.csv")
data
data.frame(data)
write.csv(data.frame(data), file="training_data.csv")
test = data[1:10,]
data.frame(test$ingredients)
unlist(test$ingredients)
unlist(test$ingredients[1])
test$ingredients[1]
paste(test$ingredients[1],collaspe=",")
paste(test$ingredients[1],seo=",")
paste(test$ingredients[1],sep=",")
paste0(test$ingredients[1],sep=",")
paste0(test[1,],sep=",")
paste(test[1,],sep=",")
c(test$cuisine[1], paste(test$ingredients[1],sep=","))
typeof(test$cuisine[1])
typeof(test$ingredients[1])
typeof(paste(test[1,],sep=","))
paste(test$cuisine[1], paste(test$ingredients[1],sep=","), sep=",")
paste(test$cuisine[1], unlist(paste(test$ingredients[1],sep=",")), sep=",")
paste(test$cuisine[1], unlist(paste(test$ingredients[1],sep=",")), sep=",",collapse = "")
paste(test$cuisine[1], paste(test$ingredients[1],sep=",",collapse = ""), sep=",")
paste(test$cuisine[1], paste(test$ingredients[1],sep=","), collapse=",")
paste(c(test$cuisine[1]), paste(test$ingredients[1],sep=","), collapse=",")
paste(test[1,],sep=",")
paste(test$ingredients[1],sep=",")
paste(test$ingredients[1],collaspe=",")
test$ingredients[1]
test$ingredients[1][1]
test$ingredients[[1]]
paste(test$ingredients[[1]],sep=",")
paste(test$ingredients[[1]],collaspe=",")
c(test$cuisine[1], paste(test$ingredients[[1]],collaspe=","))
paste(test$cuisine[1], paste(test$ingredients[[1]],collaspe=",") sep=",")
paste(test$cuisine[1], paste(test$ingredients[[1]], collaspe=","), sep=",")
c(test$cuisine[1], paste(test$ingredients[[1]], collaspe=","))
c(test$cuisine[1]+",", paste(test$ingredients[[1]], collaspe=","))
c(test$cuisine[1], ", ", paste(test$ingredients[[1]], collaspe=","))
paste(c(test$cuisine[1], ", ", paste(test$ingredients[[1]], collaspe=",")))
c(test$cuisine[1], ", ", paste(test$ingredients[[1]], collaspe=","))
sapply(data, function(row) {
c(rows$cuisine, ", ", paste(row$ingredients, collapse = "," ))
})
sapply(data, function(row) {
})
sapply(data, function(row) {
c(row$cuisine, ", ", paste(row$ingredients, collapse = "," ))
})
sapply(data, function(row) {
row})
sapply(data, function(row) {
row[1]})
sapply(data, function(row) {
row[,1]})
sapply(data, function(row) {
row$cuisine})
sapply(data, function(row) {
x
})
sapply(data, function(data_row) {
c(data_row$cuisine, ", ", paste(data_row$ingredients, collapse = "," ))
})
sapply(data, function(row) {
row[2]
})
sapply(data, function(row) {
row[[2]]
})
sapply(data, function(row) {
row[[1]]
})
sapply(data, function(row) {
row
})
sapply(data, function(row) {
row[1]$id
})
sapply(data, function(row) {
typeof(row)
})
sapply(data, function(row) {
row["id"]
})
sapply(data, function(row) {
row$
})
sapply(data, function(row) {
row
})
colnames(data_)
colnames(data)
colnames(data[1,3])
colnames(data[1])
colnames(data[2])
colnames(data[3])
colnames(data[1,])
colnames(data[2,])
colnames(data[2,2])
colnames(data[2,3])
colnames(data[2,1])
data[1,3]
typeof(data[1,3])
inspect(data[1,3])
nrows(data)
nrow(data)
data$id
data$id[1]
data$id[[1]]
sapply(1:nrow(data), function(index) {
c(data_row$cuisine[index], ", ", paste(data_row$ingredients[[index]], collapse = "," ))
})
sapply(1:nrow(data), function(index) {
c(data$cuisine[index], ", ", paste(data$ingredients[[index]], collapse = "," ))
})
data$cuisine[1]
file_connection <- file("training_data.csv")
sapply(1:nrow(data), function(index) {
writeLines(c(data$cuisine[index], ", ", paste(data$ingredients[[index]], collapse = "," )), file_connection)
})
file_connection <- file("training_data.csv")
close(file_connection)
file_connection <- file("training_data.csv")
sapply(1:nrow(data), function(index) {
writeLines(c(data$cuisine[index], ", ", paste(data$ingredients[[index]], collapse = "," )), file_connection)
})
close(file_connection)
sapply(1:nrow(data), function(index) {
c(data$cuisine[index], ", ", paste(data$ingredients[[index]], collapse = "," ))
})
c(data$cuisine[index], ", ", paste(data$ingredients[[index]], collapse = "," ))
index = 5
c(data$cuisine[index], ", ", paste(data$ingredients[[index]], collapse = "," ))
c(data$cuisine[1], ", ", paste(data$ingredients[[1]], collapse = "," ))
c(data$cuisine[1], ", ", paste(data$ingredients[[1]], sep = "," ))
paste(c(data$cuisine[index], ", ", paste(data$ingredients[[index]], sep = "," ) collapse = "")
paste(c(data$cuisine[index], ", ", paste(data$ingredients[[index]], sep = "," ) , collapse = "")
)
paste(c(data$cuisine[index], ", ", paste(data$ingredients[[index]], sep = "," ) collapse = " ")
paste(c(data$cuisine[index], ", ", paste(data$ingredients[[index]], sep = "," ), collapse = " ")
)
paste(c(data$cuisine[index], ", ", paste(data$ingredients[[index]], sep = "," )), collapse = " ")
paste(c(data$cuisine[index], ", ", paste(data$ingredients[[index]], sep = ",")))
c(data$cuisine[index], ", ", paste(data$ingredients[[index]], sep = ","))
c(data$cuisine[index], ", ", paste(data$ingredients[[index]], collapse = ","))
c(data$cuisine[index], ", ", paste(data$ingredients[[index]], sep = ",", collapse = ","))
paste(c(data$cuisine[index], ", ", paste(data$ingredients[[index]], collapse = ",")), collapse = ",")
paste(c(data$cuisine[index], paste(data$ingredients[[index]], collapse = ",")), collapse = ",")
paste(c(data$cuisine[index], paste(data$ingredients[[index]], collapse = ", ")), collapse = ", ")
file_connection <- file("training_data.csv")
sapply(1:nrow(data), function(index) {
writeLines(paste(c(data$cuisine[index], paste(data$ingredients[[index]], collapse = ", ")), collapse = ", "), file_connection)
})
paste(c(data$cuisine[index], paste(data$ingredients[[index]], collapse = ", ")), collapse = ", ")
file_connection <- file("training_data.csv")
sapply(1:nrow(data), function(index) {
writeLines(paste(c(data$cuisine[index], paste(data$ingredients[[index]], collapse = ", ")), collapse = ", "), file_connection)
})
close(file_connection)
cat("Cuisine, Ingredients", file="training.csv", sep="\n")
sapply(1:nrow(data), function(index) {
cat(paste(c(data$cuisine[index], paste(data$ingredients[[index]], collapse = ", ")), collapse = ", "), file="training.csv", append=TRUE)
})
close(file_connection)
cat("Cuisine, Ingredients", file="training.csv", sep="\n")
sapply(1:nrow(data), function(index) {
cat(paste(c(data$cuisine[index], paste(data$ingredients[[index]], collapse = ", ")), collapse = ", "), file="training.csv", append=TRUE, sep="\n")
})
library(tm)
tm
installed.packages("tm")
installed.packages(tm)
sessionInfo()
testing
confusionMatrix(cart_predict, testing$cuisine)
library(caret)
confusionMatrix(cart_predict, testing$cuisine)
lm
help(lm)
# Used for reading and writing JSON
library(jsonlite)
source('~/ECS_171/Ma-Chef-Learning/src/load_source_files.R', echo=TRUE)
install.packages("randomForest")
library(randomForest)
source('~/ECS_171/Ma-Chef-Learning/src/run_functions.R', echo=TRUE)
source('~/ECS_171/Ma-Chef-Learning/src/load_source_files.R', echo=TRUE)
source('~/ECS_171/Ma-Chef-Learning/src/run_functions.R', echo=TRUE)
source('~/ECS_171/Ma-Chef-Learning/src/load_source_files.R', echo=TRUE)
source('~/ECS_171/Ma-Chef-Learning/src/run_functions.R', echo=TRUE)
source('~/ECS_171/Ma-Chef-Learning/src/run_functions.R', echo=TRUE)
source('~/ECS_171/Ma-Chef-Learning/src/load_source_files.R', echo=TRUE)
source('~/ECS_171/Ma-Chef-Learning/src/run_functions.R', echo=TRUE)
gc()
source('~/ECS_171/Ma-Chef-Learning/src/load_source_files.R', echo=TRUE)
gc()
source('~/ECS_171/Ma-Chef-Learning/src/load_source_files.R', echo=TRUE)
source('~/ECS_171/Ma-Chef-Learning/src/run_functions.R', echo=TRUE)
decision_tree <- build_decision_tree(ingredients_bag_of_words)
data <- ingredients_bag_of_words
decision_tree <- randomForest(cuisine ~ ., data = data, method = data$cuisine)
decision_tree <- randomForest(cuisine ~ ., data = data, method = data$cuisine, ntree=10)
decision_tree <- randomForest(cuisine ~ ., data = data, y = data$cuisine, ntree=10)
decision_tree <- randomForest(cuisine ~ ., data = data, ntree=10)
plot(decision_tree, x="1")
plot(decision_tree)
results <- predict_and_get_results(decision_tree, testing_bag, testing_data$id)
decision_tree <- randomForest(cuisine ~ ., data = data, ntree=100)
